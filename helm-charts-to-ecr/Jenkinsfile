pipeline {
    agent any

    environment {
        AWS_REGION = credentials('aws-region') // Jenkins에 저장된 AWS 리전 정보
        ECR_REGISTRY = credentials('ecr-registry') // Jenkins에 저장된 ECR 레지스트리 URL
        ALLOWED_ACCOUNTS = credentials('allowed-accounts') // Jenkins에 저장된 허용된 계정 정보 (선택적)
    }

    triggers {
        // Webhook 기반 트리거
        pollSCM('H/5 * * * *') // 5분마다 Git 변경 사항 확인
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                checkout scm
            }
        }

        stage('Validate Changed Files') {
            steps {
                script {
                    // 변경된 파일 목록 확인
                    def changedFiles = sh(
                        script: "git diff-tree --no-commit-id --name-only -r $GIT_COMMIT",
                        returnStdout: true
                    ).trim().split("\n")

                    // 특정 파일이 변경되었는지 확인
                    if (!changedFiles.contains("helm-charts-to-ecr/asserts/charts.txt")) {
                        echo "No changes in charts.txt. Skipping pipeline."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('Validate charts.txt Format') {
            steps {
                echo 'Validating charts.txt format...'
                sh '''
                if ! grep -E '^[^,]+,[^,]+,[^,]+$' helm-charts-to-ecr/asserts/charts.txt; then
                    echo "Error: Invalid format in charts.txt. Expected format: <helm_repo>,<chart_path>,<chart_version>"
                    exit 1
                fi
                '''
            }
        }

        stage('Process Helm Charts') {
            steps {
                echo 'Processing Helm Charts...'
                sh '''
                INPUT_FILE="helm-charts-to-ecr/asserts/charts.txt"
                > failed_jobs.log  # 실패한 작업 기록 초기화
                while IFS= read -r line || [ -n "$line" ]; do
                    HELM_REPO=$(echo "$line" | cut -d ',' -f 1)
                    CHART_PATH=$(echo "$line" | cut -d ',' -f 2)
                    CHART_VERSION=$(echo "$line" | cut -d ',' -f 3)
                    if [[ -z "$HELM_REPO" || -z "$CHART_PATH" || -z "$CHART_VERSION" ]]; then
                        echo "Error: Invalid line format in charts.txt: $line"
                        continue
                    fi
                    echo "Processing: $HELM_REPO, $CHART_PATH, $CHART_VERSION, $ECR_REGISTRY"
                    chmod +x helm-charts-to-ecr/helm_chart_to_ecr.sh
                    ./helm-charts-to-ecr/helm_chart_to_ecr.sh "$HELM_REPO" "$CHART_PATH" "$CHART_VERSION" "$AWS_REGION" "$ECR_REGISTRY" "${ALLOWED_ACCOUNTS:-}" || echo "$HELM_REPO,$CHART_PATH,$CHART_VERSION" >> failed_jobs.log
                done < "$INPUT_FILE"
                '''
            }
        }

        stage('Print Failed Jobs') {
            steps {
                echo 'Checking for failed jobs...'
                sh '''
                if [ -s failed_jobs.log ]; then
                    echo "The following jobs failed:"
                    cat failed_jobs.log
                    exit 1
                else
                    echo "All jobs completed successfully."
                fi
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}